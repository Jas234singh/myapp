{"ast":null,"code":"var _jsxFileName = \"E:\\\\GoodReact\\\\myapp\\\\src\\\\components\\\\Textform.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Textform(props) {\n  _s();\n  // const handleOnChange  =(event) => {\n  //     setText(event.target.value);\n  // }\n  // const ch  =(onClick) => {\n  //     console.log(\"uppercase clixked\" +text);\n  // let newtext = text.toUpperCase();\n  // setText(newtext);\n  // }\n\n  // const speak = () => {\n  //   let msg = new SpeechSynthesisUtterance();\n  //   msg.text = text;\n  //   window.speechSynthesis.speak(msg);\n  // }\n  // const locase =() =>{\n  //   let newtextt = text.toLowerCase();\n  //   setText(newtextt);\n  // }\n  // const Clear =() =>{\n  //   let newtexttt = '';\n  //   setText(newtexttt);\n  // }\n  const [mystyle, setStyle] = useState({\n    color: 'white',\n    backgroundColor: 'black'\n  });\n  const [btntext, setBtnText] = useState(\"\");\n  const toggle = () => {\n    if (mystyle.color == 'white') {\n      setStyle({\n        color: \"black\",\n        blackgroundColor: \"white\"\n      });\n      setBtnText(\"enable light color\");\n    } else {\n      setStyle({\n        color: \"black\",\n        backgroundColor: \"white\"\n      });\n      setBtnText(\"enable dark mode\");\n    }\n  };\n  // const [text,setText] =useState('');\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      style: mystyle,\n      children: [\"/* \", /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"my-2 \",\n        children: \"Text Summary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [text.split(\" \").length, \" words and \", text.length, \" characters \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [0.008 * text.split(\" \").length, \"words read\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Preview Text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 1\n      }, this), \" */}\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(Textform, \"3h0D9EP7ZCTEQ3KVsFF1LOGiOg4=\");\n_c = Textform;\nvar _c;\n$RefreshReg$(_c, \"Textform\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Textform","props","_s","mystyle","setStyle","color","backgroundColor","btntext","setBtnText","toggle","blackgroundColor","children","className","style","fileName","_jsxFileName","lineNumber","columnNumber","text","split","length","_c","$RefreshReg$"],"sources":["E:/GoodReact/myapp/src/components/Textform.js"],"sourcesContent":["import React ,{useState} from 'react'\r\n\r\nexport default function Textform(props) {\r\n\r\n// const handleOnChange  =(event) => {\r\n//     setText(event.target.value);\r\n// }\r\n// const ch  =(onClick) => {\r\n//     console.log(\"uppercase clixked\" +text);\r\n// let newtext = text.toUpperCase();\r\n// setText(newtext);\r\n// }\r\n\r\n// const speak = () => {\r\n//   let msg = new SpeechSynthesisUtterance();\r\n//   msg.text = text;\r\n//   window.speechSynthesis.speak(msg);\r\n// }\r\n// const locase =() =>{\r\n//   let newtextt = text.toLowerCase();\r\n//   setText(newtextt);\r\n// }\r\n// const Clear =() =>{\r\n//   let newtexttt = '';\r\n//   setText(newtexttt);\r\n// }\r\nconst [mystyle,setStyle] =useState({\r\ncolor:'white',\r\nbackgroundColor:'black',\r\n\r\n});\r\nconst [btntext,setBtnText] =useState(\"\");\r\nconst toggle =()=>{\r\n  if(mystyle.color == 'white'){\r\n    setStyle({\r\n      color:\"black\",blackgroundColor:\"white\"})\r\nsetBtnText(\"enable light color\");\r\n  }\r\n  else{\r\n    setStyle({color:\"black\",backgroundColor:\"white\"});\r\n    setBtnText(\"enable dark mode\");\r\n  }\r\n}\r\n// const [text,setText] =useState('');\r\n  return (\r\n    <><div className='container' style ={mystyle}>\r\n    {/* <div className=\"mb-3\">\r\n<h1 className='my-2 mx-2'>{props.Hea}</h1>\r\n<textarea className=\"form-control\" value ={text} onChange ={handleOnChange} id=\"exampleFormControlTextarea1\" rows=\"3\"></textarea>\r\n<button className =\"btn btn-success mx-2 my-2 text-white\" onClick ={ch}>Click for uppercase</button>\r\n<button className =\"btn btn-danger mx-2 my-2 text-dark\" onClick ={locase}>Click for lowercase</button>\r\n<button className =\"btn btn-primary my-2 mx-2 text-dark\" onClick ={Clear}>Click for clear text</button>\r\n<button onClick={speak} className=\"btn btn-warning mx-2 my-2\">Speak</button>\r\n<button onclick ={toggle} type =\"submit\" className =\"btn btn-success\">{btntext}</button>\r\n\r\n\r\n</div>\r\n</div>\r\n// <div className =\"container text-bold\"> */}\r\n  /* <h1 className =\"my-2 \">Text Summary</h1>\r\n<p>{text.split(\" \").length} words and {text.length} characters </p>\r\n<p>{0.008* text.split(\" \").length}words read</p>\r\n<h1>Preview Text</h1>\r\n<p>{text}</p> */}\r\n</div></>\r\n    \r\n  )\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,QAAO,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAErC,eAAe,SAASC,QAAQA,CAACC,KAAK,EAAE;EAAAC,EAAA;EAExC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,MAAM,CAACC,OAAO,EAACC,QAAQ,CAAC,GAAET,QAAQ,CAAC;IACnCU,KAAK,EAAC,OAAO;IACbC,eAAe,EAAC;EAEhB,CAAC,CAAC;EACF,MAAM,CAACC,OAAO,EAACC,UAAU,CAAC,GAAEb,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAMc,MAAM,GAAEA,CAAA,KAAI;IAChB,IAAGN,OAAO,CAACE,KAAK,IAAI,OAAO,EAAC;MAC1BD,QAAQ,CAAC;QACPC,KAAK,EAAC,OAAO;QAACK,gBAAgB,EAAC;MAAO,CAAC,CAAC;MAC9CF,UAAU,CAAC,oBAAoB,CAAC;IAC9B,CAAC,MACG;MACFJ,QAAQ,CAAC;QAACC,KAAK,EAAC,OAAO;QAACC,eAAe,EAAC;MAAO,CAAC,CAAC;MACjDE,UAAU,CAAC,kBAAkB,CAAC;IAChC;EACF,CAAC;EACD;EACE,oBACEX,OAAA,CAAAE,SAAA;IAAAY,QAAA,eAAEd,OAAA;MAAKe,SAAS,EAAC,WAAW;MAACC,KAAK,EAAGV,OAAQ;MAAAQ,QAAA,GAaJ,KACxC,eAAAd,OAAA;QAAIe,SAAS,EAAE,OAAO;QAAAD,QAAA,EAAC;MAAY;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC7CpB,OAAA;QAAAc,QAAA,GAAIO,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,MAAM,EAAC,aAAW,EAACF,IAAI,CAACE,MAAM,EAAC,cAAY;MAAA;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACnEpB,OAAA;QAAAc,QAAA,GAAI,KAAK,GAAEO,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,MAAM,EAAC,YAAU;MAAA;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eAChDpB,OAAA;QAAAc,QAAA,EAAI;MAAY;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACrBpB,OAAA;QAAAc,QAAA,EAAIO;MAAI;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,QACb;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK;EAAC,gBAAE,CAAC;AAGT;AAACf,EAAA,CAjEuBF,QAAQ;AAAAqB,EAAA,GAARrB,QAAQ;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}